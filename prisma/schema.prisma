datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Story       Story[]
  GameSession GameSession[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Story {
  id            String  @id @default(cuid())
  title         String
  description   String?
  isAiGenerated Boolean @default(false)
  userId        String

  createdBy User   @relation(fields: [userId], references: [id])
  nodes     Node[]

  startNodeId String? @unique
  startNode   Node?   @relation("StoryStartNode", fields: [startNodeId], references: [id])

  sessions GameSession[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Node {
  id      String @id @default(cuid())
  content String

  // This node belongs to a story
  storyId String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  // Each node has many actions
  actions Action[] @relation("NodeActions")

  // This node can be the start of a Story
  startedInStory Story? @relation("StoryStartNode")

  // Action that leads to this node
  incomingActions Action[] @relation("ActionToNode")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Action {
  id     String @id @default(cuid())
  action String

  // Each action belongs to a node
  nodeId String
  node   Node   @relation("NodeActions", fields: [nodeId], references: [id])

  // Reference to next node
  nextNodeId String?
  nextNode   Node?   @relation("ActionToNode", fields: [nextNodeId], references: [id])

  sessions GameSession[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model GameSession {
  id      String @id @default(cuid())
  userId  String
  storyId String

  user    User     @relation(fields: [userId], references: [id])
  story   Story    @relation(fields: [storyId], references: [id])
  actions Action[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
